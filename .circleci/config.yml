# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
  heroku: circleci/heroku@1.2.6

executors:
  my-machine:
    machine: true
    working_directory: /tmp/workspace

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    working_directory: ~/Python-OC-Lettings-FR
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run pytest
          # This assumes pytest is installed via the install-package step above
          command: pytest
      - run:
          name: linting PEP8
          command: flake8 --ignore=F403, F401, F405

  build-push-docker:
    executor: my-machine
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: docker build -t marinebdlt/lettings:$CIRCLE_SHA1 .
      - run:
          name: Push Docker Image
          command: |
            docker tag marinebdlt/lettings:$CIRCLE_SHA1 marinebdlt/lettings:lastest
            docker login -u marinebdlt -p $PASSWORD docker.io 
            docker push marinebdlt/lettings:$CIRCLE_SHA1
            docker push marinebdlt/lettings:lastest

  deploy:
    machine: True
    steps:
      - checkout
      - run:
          name: Deploy on Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            HEROKU_API_KEY=03860530-81a3-4da2-a2e1-cf77cea0fbcf heroku container:login
            HEROKU_API_KEY=03860530-81a3-4da2-a2e1-cf77cea0fbcf heroku container:push -a lettings-app-op web
            HEROKU_API_KEY=03860530-81a3-4da2-a2e1-cf77cea0fbcf heroku container:release -a lettings-app-op web
workflows:
  version: 2
  test-the-application: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - test:
          filters:
            branches:
              ignore: master
  push-the-application:
    jobs:
      - test
      - build-push-docker:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - test
            - build-push-docker
          filters:
            branches:
              only: master
  # deploy-the-application:
  #   jobs:
  #     - test
  #     - build-push-docker
  #     - deploy:
  #         filters:
  #           branches:
  #             only: master

  # HEROKU LOGIN TEMRINAL
  # AUTH TOKEN TERMINAL
  # RECUPERER LE TOKEN

  # - heroku/install
  # - run: heroku maintenance:on --app oc-lettings-app
  # - run: heroku config:set BUILD_NUMBER=$CIRCLE_BUILD_NUM -a oc-lettings-app
  # - run: heroku config:set SECRET_KEY=$SECRET_KEY -a oc-lettings-app
  # # - run: heroku config:set SENTRY_DSN=$SENTRY_DSN -a oc-lettings-app
  # - run: heroku stack:set heroku-20 -a oc-lettings-app
  # - run: heroku maintenance:off --app oc-lettings-app
  # - heroku/deploy-via-git:
  #     force: true
  # command: |
  #       sudo curl https://cli-assets.heroku.com/install.sh | sh
  #       HEROKU_API_KEY=$ 03860530-81a3-4da2-a2e1-cf77cea0fbcf heroku container:login
  #       HEROKU_API_KEY=$ 03860530-81a3-4da2-a2e1-cf77cea0fbcf heroku container:push -a nom-de-application web
  #       HEROKU_API_KEY=$ 03860530-81a3-4da2-a2e1-cf77cea0fbcf heroku container:release -a nom-de-application web
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
